function caldata = load_cal_and_smooth(filename, smooth_window, varargin)
%--------------------------------------------------------------------------
% caldata = load_cal_and_smooth(filename, smooth_window, noinverse)
%--------------------------------------------------------------------------
%	Audio Toolbox: Calibration
%--------------------------------------------------------------------------
%	Function to read in calibration data generated by calibration programs
%	smooths magnitudes to avoid odd sharp resonances/dips
%--------------------------------------------------------------------------
%	Input Arguments:
%		filename			name of cal file (usually ear.cal)
%		smooth_window	# of freqs to use for moving window average smoother
%		noinverse		1: don't convert to inverse filter
%							0: convert to inverse filter (default)
%--------------------------------------------------------------------------
%	Output Arguments:
%		caldata		Matlab structure containing cal data
% 
%			Critical elements are:
% 
%				caldata.mag	
%				caldata.phase
% 
%				These are both 2XN arrays, with the first row containing
%				data for the Left channel and the second row containing
%				Right channel data.  
%				This is the convention for all calibration data
% 
% 				If arrays are 3XN, then the 3rd channel is reference mic data
%--------------------------------------------------------------------------
%	See also: LOAD_CAL, GET_CAL, FAKE_FLATCAL, READEARCAL, WRITEEARCAL;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Sharad J Shanbhag
% sshanbhag@neomed.edu
%--------------------------------------------------------------------------
% Created:	30 May, 2019 from load_cal
%
% Revisions:
%	30 May, 2019 (SJS): add smoothing
%	10 Jun, 2019 (SJS): trying to harmonize fields/values between
%		caldata from NICal and Calibrate programs... it is a fucking mess
%--------------------------------------------------------------------------

if nargin < 2
	error('%s: need 2 input args', mfilename);
end

if smooth_window < 0
	error('%s: smooth_window must be >= 0', mfilename);
end

if nargin ~= 3
	noinverse = 0;
else
	noinverse = 1;
end

if ~exist(filename, 'file')
	error(['Calibration file ' filename ' not found']);
end

% load caldata
load(filename, '-MAT', 'caldata');

caldata.phase_us = caldata.phase; %#ok<NODEF>
% preconvert phases from angle (RADIANS) to microsecond
if isfield(caldata, 'freq')
	caldata.phase_us(1, :) = (1.0e6 * unwrap(caldata.phase(1, :))) ./ ...
													(2 * pi * caldata.freq);
	caldata.phase_us(2, :) = (1.0e6 * unwrap(caldata.phase(2, :))) ./ ...
													(2 * pi * caldata.freq);
	caldata.Freqs = caldata.freq;
elseif isfield(caldata, 'Freqs')
	caldata.phase_us(1, :) = (1.0e6 * unwrap(caldata.phase(1, :))) ./ ...
													(2 * pi * caldata.Freqs);
	caldata.phase_us(2, :) = (1.0e6 * unwrap(caldata.phase(2, :))) ./ ...
													(2 * pi * caldata.Freqs);
	caldata.freq = caldata.Freqs;
else
	error('%s: no freq or Freqs in caldata????', mfilename)
end

% smooth the calibration mag data, store old mag in mag_smooth
caldata.mag_orig = caldata.mag;
caldata.smooth_window = smooth_window;
if smooth_window > 1
	caldata.mag = smooth_calibration_data(...
														1, ...
														caldata, ...
														smooth_window);
end
% get the overall min and max dB SPL levels
caldata.mindbspl = min(caldata.mag'); %#ok<*UDIM>
caldata.maxdbspl = max(caldata.mag');

% if inverse needed (not told to not create inverse... :), do it
if ~noinverse
	% precompute the inverse filter, and convert to RMS value.
	caldata.maginv = zeros(2, length(caldata.mag));
	% subtract SPL mags (at each freq) from the min dB recorded for each
	% channel and convert back to Pa (rms)
	caldata.maginv(1, :) = invdb(caldata.mindbspl(1) - caldata.mag(1, :));
	caldata.maginv(2, :) = invdb(caldata.mindbspl(2) - caldata.mag(2, :));
end

%-----------------------------------------------
% assign some things
%-----------------------------------------------

% DA scale
if isfield(caldata, 'micsettings')
	if isfield(caldata.micsettings, 'DAscale')
		caldata.DAscale = caldata.micsettings.DAscale;
	else
		caldata.DAscale = 1;
	end
elseif isfield(caldata, 'frdata')
	if isfield(caldata.frdata, 'DAscale')
		caldata.DAscale = caldata.frdata.DAscale;
	else
		caldata.DAscale = 1;
	end	
elseif isfield(caldata, 'DAlevel')
	caldata.DAscale = caldata.DAlevel;
else
	warning('%s: could not find caldata.DAscale or caldata.DAlevel', ...
						mfilename);
	error('%s: no DA scale or level in %s', mfilename, filename);
% 	caldata.DAscale = 1;
end

% Mic sensitivity
if ~isfield(caldata, 'VtoPa')
	if isfield(caldata, 'cal')
		if isfield(caldata.cal, 'VtoPa')
			caldata.VtoPa = caldata.cal.VtoPa(1);
		end
	end
end





