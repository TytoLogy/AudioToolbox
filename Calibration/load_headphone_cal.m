function caldata = load_headphone_cal(filename, noinverse)
%--------------------------------------------------------------------------
% caldata = load_headphone_cal(filename, noinverse)
%--------------------------------------------------------------------------
%
%	Function to read in calibration data generated by the HeadphoneCal program.
%
%--------------------------------------------------------------------------
%	Input Arguments:
%		filename		name of cal file (usually ear.cal)
%		noinverse	don't convert to inverse filter
%--------------------------------------------------------------------------
%	Output Arguments:
%		caldata		Matlab structure containing cal data
% 
%			Critical elements are:
% 
%				caldata.mag	
%				caldata.phase
% 
%				These are both 2XN arrays, with the first row containing
%				data for the Left channel and the second row containing
%				Right channel data.  
%				This is the convention for all calibration data
% 
% 				If arrays are 3XN, then the 3rd channel is reference mic data
%--------------------------------------------------------------------------
%	See also: GET_CAL, FAKE_FLATCAL, READEARCAL, WRITEEARCAL;
%--------------------------------------------------------------------------
%	Audio Toolbox
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Sharad Shanbhag
% sshanbha@aecom.yu.edu
%--------------------------------------------------------------------------
%
% Created:	18 June, 2008	SJS
%
% Revisions:
%
%	2 April, 2009 (SJS):
% 		- made some changes to account for reference channel
%	29 October, 2009 (SJS): updated documentation
%--------------------------------------------------------------------------

if nargin ~= 2
	noinverse = 0;
end

if ~exist(filename)
	error(['Calibration file ' filename ' not found']);
end

load(filename);

caldata.phase_us = caldata.phase;
% preconvert phases from angle (RADIANS) to microsecond
caldata.phase_us(1, :) = (1.0e6 * unwrap(caldata.phase(1, :))) ./ (2 * pi * caldata.freq);
caldata.phase_us(2, :) = (1.0e6 * unwrap(caldata.phase(2, :))) ./ (2 * pi * caldata.freq);

% get the overall min and max dB SPL levels
% caldata.mindbspl(1) = min(caldata.mag(1, :));
% caldata.mindbspl(2) = min(caldata.mag(2, :));
% caldata.maxdbspl(1) = max(caldata.mag(1, :));
% caldata.maxdbspl(2) = max(caldata.mag(2, :));
caldata.mindbspl = min(caldata.mag');
caldata.maxdbspl = max(caldata.mag');

% precompute the inverse filter, and convert to RMS value.
caldata.maginv = zeros(2, length(caldata.mag));
% subtract SPL mags (at each freq) from the min dB recorded for each
% channel and convert back to Pa (rms)
caldata.maginv(1, :) = invdb(caldata.mindbspl(1) - caldata.mag(1, :));
caldata.maginv(2, :) = invdb(caldata.mindbspl(2) - caldata.mag(2, :));

if isfield(caldata, 'micsettings')
	if isfield(caldata.micsettings, 'DAscale')
		caldata.DAscale = caldata.micsettings.DAscale;
	else
		caldata.DAscale = 1;
	end
elseif isfield(caldata, 'frdata')
	if isfield(caldata.frdata, 'DAscale')
		caldata.DAscale = caldata.frdata.DAscale;
	else
		caldata.DAscale = 1;
	end	
else
	caldata.DAscale = 1;
end


